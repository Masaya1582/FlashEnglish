name: Upload to App Store  # App Storeにアップロード

on:
  push:
    tags:
      - 'v*'

jobs:
  upload-to-appstore:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'  # FastlaneとCocoaPodsに必要なRubyのバージョン3.2を使用

    - name: Cache CocoaPods
      uses: actions/cache@v2
      with:
        path: Pods  # インストール済みのCocoaPodsの依存関係をキャッシュ
        key: ${{ runner.os }}-pods-${{ hashFiles('Podfile.lock') }}  # Podfile.lockに基づいたキャッシュキー
        restore-keys: |
          ${{ runner.os }}-pods-  # メインのキャッシュが見つからなかった場合のフォールバックキー

    - name: Install CocoaPods
      run: |
        gem install bundler
        bundle install
        pod install  # CocoaPodsの依存関係をインストール

    - name: Decrypt GoogleService-Info.plist
      run: |
        mkdir -p FlashEnglish/Resources/Firebase
        echo "$GOOGLE_SERVICE_INFO_PLIST_BASE64" | base64 --decode > FlashEnglish/Resources/Firebase/GoogleService-Info.plist
      env:
        GOOGLE_SERVICE_INFO_PLIST_BASE64: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}  # FirebaseのGoogleService-Info.plistをSecretsからデコード

    - name: Decrypt and Import .p12 Certificate
      run: |
        echo "$P12_BASE64" | base64 --decode > certificate.p12
        security create-keychain -p "" build.keychain
        security list-keychains -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import ./certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
      env:
        P12_BASE64: ${{ secrets.P12_BASE64 }}  # Base64でエンコードされた証明書
        P12_PASSWORD: ${{ secrets.MATCH_PASSWORD }}  # Secretsからの証明書のパスワード

    - name: Set up Fastlane
      run: bundle exec fastlane match appstore --readonly  # Fastlane Matchを使用してAppStoreプロファイルを取得
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}  # SecretsからのMatchパスワード

    - name: Build and upload to App Store
      run: bundle exec fastlane upload_appstore  # Fastlaneでビルドし、App Storeにアップロード
      env:
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}  # Fastlaneユーザー（Apple IDなど）
        FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}  # Fastlaneパスワード
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}  # SecretsからのApp Store Connect APIキー
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

  notify:
    runs-on: ubuntu-latest
    needs: upload-to-appstore
    if: always()
    steps:
    - name: Slack Notification on Success
      if: ${{ needs.upload-to-appstore.result == 'success' }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: "Deploy / Success"
        SLACK_COLOR: good
        SLACK_MESSAGE: "Successfully uploaded build to AppStoreConnect :rocket:"

    - name: Slack Notification on Failure
      if: ${{ needs.upload-to-appstore.result == 'failure' }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: "Deploy / Failure"
        SLACK_COLOR: danger
        SLACK_MESSAGE: "Failed to upload build to AppStoreConnect :sob:"
