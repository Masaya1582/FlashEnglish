name: Distribute IPA to Firebase App Distribution

on:
  issue_comment:
    types:
      - created

jobs:
  build:
    if: github.event.issue.pull_request
    runs-on: macos-latest

    steps:
    - name: Check comment for "distribute beta"
      if: contains(github.event.comment.body, 'distribute beta')
      run: echo "Triggering distribution as 'distribute beta' comment found"

    - name: Reply with bot comment
      if: contains(github.event.comment.body, 'distribute beta')
      run: |
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"body":"Beta版アプリを配信します :rocket:"}' \
          ${{ github.event.issue.comments_url }}

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'

    - name: Cache CocoaPods
      uses: actions/cache@v2
      with:
        path: Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-  # Fallback cache key if the main one isn't found

    - name: Install CocoaPods
      run: |
        gem install bundler
        gem install cocoapods
        bundle install
        pod install

    - name: Decrypt GoogleService-Info.plist
      run: |
        mkdir -p FlashEnglish/Resources/Firebase
        echo "$GOOGLE_SERVICE_INFO_PLIST_BASE64" | base64 --decode > FlashEnglish/Resources/Firebase/GoogleService-Info.plist
      env:
        GOOGLE_SERVICE_INFO_PLIST_BASE64: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}

    - name: Decrypt and Import .p12 Certificate
      run: |
        echo "$P12_BASE64" | base64 --decode > certificate.p12
        security create-keychain -p "" build.keychain
        security list-keychains -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import ./certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
      env:
        P12_BASE64: ${{ secrets.P12_BASE64 }}
        P12_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

    - name: Set up Fastlane
      run: bundle exec fastlane match adhoc --readonly
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

    - name: Enable Parallel Code Signing
      run: |
        defaults write com.apple.dt.Xcode IDEBuildOperationMaxNumberOfConcurrentCompileTasks 4  # Enable parallel code signing to speed up builds

    - name: Build and distribute to Firebase App Distribution
      run: bundle exec fastlane distribute
      env:
        FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        FIREBASE_APP_DISTRIBUTION_API_TOKEN: ${{ secrets.FIREBASE_APP_DISTRIBUTION_API_TOKEN }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
        FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

  notify:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
    - name: Slack Notification on Success
      if: ${{ needs.build.result == 'success' }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: "Deploy / Success"
        SLACK_COLOR: good
        SLACK_MESSAGE: "Successfully distributed build to Firebase App Distribution :rocket:"

    - name: Slack Notification on Failure
      if: ${{ needs.build.result == 'failure' }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: "Deploy / Failure"
        SLACK_COLOR: danger
        SLACK_MESSAGE: "Failed to distribute build to Firebase App Distribution :sob:"
