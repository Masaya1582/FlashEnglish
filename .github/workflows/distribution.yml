name: Distribute IPA to Firebase App Distribution

on:
  issue_comment:
    types: [created]

jobs:
  build:
    if: ${{ github.event.comment.body == 'distribute beta' }}
    runs-on: macos-latest

    steps:
      - name: Check if it is a pull request and distribute beta
        run: |
          PAYLOAD=$(cat "$GITHUB_EVENT_PATH")
          NUMBER=$(echo "$PAYLOAD" | jq -r '.issue.number')

          # Check if the comment is associated with a pull request
          if [[ "$(echo "$PAYLOAD" | jq -c '.issue.pull_request')" == "null" ]]; then
            echo "This is not a pull request. Skipping."
            exit 0
          fi

          # Get the pull request details
          PULL_REQUEST=$(gh api "repos/$GITHUB_REPOSITORY/pulls/$NUMBER")
          
          # Check if the comment body contains "distribute beta"
          if [[ "$(echo "$PAYLOAD" | jq -r '.comment.body' | grep -i 'distribute\\s\\+beta')" ]]; then
            echo "Distribute beta command detected. Proceeding with distribution."

            # Post a comment back to the pull request
            gh api "repos/$GITHUB_REPOSITORY/issues/$NUMBER/comments" -F "body=Beta版アプリ配布ジョブを実行します :rocket:"
          else
            echo "No valid distribute beta command found. Exiting."
            exit 0
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'

    - name: Set Xcode version
      run: |
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        sudo xcodebuild -runFirstLaunch

    - name: Cache CocoaPods
      uses: actions/cache@v2
      with:
        path: Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    - name: Install CocoaPods
      run: |
        gem install bundler
        bundle install
        pod install

    - name: Decrypt GoogleService-Info.plist
      run: |
        mkdir -p FlashEnglish/Resources/Firebase
        echo "$GOOGLE_SERVICE_INFO_PLIST_BASE64" | base64 --decode > FlashEnglish/Resources/Firebase/GoogleService-Info.plist
      env:
        GOOGLE_SERVICE_INFO_PLIST_BASE64: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}

    - name: Decrypt and Import .p12 Certificate
      run: |
        echo "$P12_BASE64" | base64 --decode > certificate.p12
        security create-keychain -p "" build.keychain
        security list-keychains -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import ./certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
      env:
        P12_BASE64: ${{ secrets.P12_BASE64 }}
        P12_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

    - name: Set up Fastlane
      run: bundle exec fastlane match adhoc --readonly
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

    - name: Enable Parallel Code Signing
      run: |
        defaults write com.apple.dt.Xcode IDEBuildOperationMaxNumberOfConcurrentCompileTasks 4

    - name: Build and distribute to Firebase App Distribution
      run: bundle exec fastlane distribute
      env:
        FIREBASE_APP_DISTRIBUTION_API_TOKEN: ${{ secrets.FIREBASE_APP_DISTRIBUTION_API_TOKEN }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
        FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}

    # Uncomment these for Slack notifications if needed
    # - name: Notify Slack on Success
    #   if: success()
    #   uses: rtCamp/action-slack-notify@v2
    #   env:
    #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
    #     SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ID }}
    #     SLACK_TITLE: "Build Successful!"
    #     SLACK_MESSAGE: "Successfully distributed build to Firebase App Distribution 🚀"
    #     SLACK_COLOR: "good"

    # - name: Notify Slack on Failure
    #   if: failure()
    #   uses: rtCamp/action-slack-notify@v2
    #   env:
    #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
    #     SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ID }}
    #     SLACK_TITLE: "Build Failed!"
    #     SLACK_MESSAGE: "Failed to distribute build to Firebase App Distribution😭"
    #     SLACK_COLOR: "danger"
